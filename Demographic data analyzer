import pandas as pd


def calculate_demographic_data(print_data=True):
    # Read data from file
    df = df = pd.read_csv("adult.data.csv")
    
    # How many of each race are represented in this dataset?
    race_count = pd.Series(df["race"].value_counts())
    
    # What is the average age of men?
    average_age_men = round(df[df["sex"]=="Male"]["age"].mean(),1)   

    # What is the percentage of people who have a Bachelor's degree?
    percentage_bachelors = round((len(df[df["education"] == "Bachelors"]) / len(df["education"]))*100, 1)

    # What percentage of people with advanced education (`Bachelors`, `Masters`, or `Doctorate`) make more than 50K?
    # What percentage of people without advanced education make more than 50K?

   
    # with and((bad_education_above_50k / bad_education) *100, 1)

    # What is the minimum numbd without `Bachelors`, `Masters`, or `Doctorate`
    higher_education = len(df[((df["education"] == "Bachelors") |
                               (df["education"] == "Masters") |
                               (df["education"] == "Doctorate"))])

    # percentage with salary >50K
    higher_education_above_50k = len(df[((df["education"] == "Bachelors") |
                               (df["education"] == "Masters") |
                               (df["education"] == "Doctorate"))
                                        & (df["salary"] == ">50K")])
    
    higher_education_rich = round((higher_education_above_50k / higher_education) *100, 1)

    
    bad_education = len(df[((df["education"] != "Bachelors") &
                            (df["education"] != "Masters") &
                            (df["education"] != "Doctorate"))])
    
    bad_education_above_50k = len(df[((df["education"] != "Bachelors") &
                            (df["education"] != "Masters") &
                            (df["education"] != "Doctorate"))
                             & (df["salary"] == ">50K")])
    bad_education_rich = rouner of hours a person works per week (hours-per-week feature)?
    min_works_hours = df["hours-per-week"].min()

    # What percentage of the people who work the minimum number of hours per week have a salary of >50K?
    num_min_worker = len(df[(df["hours-per-week"] == 1)])
    num_min_workers_above_50K = len(df[(df["hours-per-week"] ==  min_works_hours) & (df["salary"] == ">50K")])

    rich_percentage = round((num_min_workers_above_50K / num_min_worker)* 100, 1)

    df1 = round((df[(df["salary"] == ">50K")]["native-country"].value_counts()/ df["native-country"].value_counts())*100, 1)
    df1=df1.sort_values(ascending = False)
    highest_earning_country = df1.index[0]

    highest_earning_country_percentage = df1[0]

    top_IN_occupation = df[(df["salary"] == ">50K") & (df["native-country"] == "Iran")]["occupation"].value_counts().index[0]
    
    # DO NOT MODIFY BELOW THIS LINE
    
    if print_data:
        print("Number of each race:\n", race_count) 
        print("Average age of men:", average_age_men)
        print(f"Percentage with Bachelors degrees: {percentage_bachelors}%")
        print(f"Percentage with higher education that earn >50k: {higher_education_rich}%")
        print(f"Percentage without higher education that earn >50k: {bad_education_rich}%")
        print(f"Min work time:{ min_works_hours}hours/week")
        print(f"percentage of rich people who work fewer hours:{rich_percentage}%")
        print(f"country with highest percentage of rich:", highest_earning_country)
        print(f"highest percentage of rich people in country:{highest_earning_country_percentage}%")
        print("Top occupations in Iran.", top_IN_occupation)
    
    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'bad_education_rich': bad_education_rich,
        'min_works_hours': min_works_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage': highest_earning_country_percentage,
        'top_IN_occupation':top_IN_occupation
    }


calculate_demographic_data()
